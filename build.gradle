import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

buildscript {
    repositories {
		maven { url 'https://maven.parchmentmc.org' }
		maven { url 'https://maven.minecraftforge.net' }
		maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
		jcenter()
		mavenCentral()
    }
    dependencies {
		classpath 'org.parchmentmc:librarian:1.+'
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
    }
}

plugins {
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'eclipse'

version = '1.16.5-alpha-0.1.0'
group = 'com.cy4.machina'
archivesBaseName = 'machina'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

mixin {
    add sourceSets.main, "machina.mixins.refmap.json"
    config "machina.mixins.json"
    
    debug.verbose = true
    debug.export = true
}

sourceSets {
	main {
		java {
			srcDirs = [ "$rootDir/src/main/java" ]
		}
		resources {
			srcDirs = [ "$rootDir/src/main/resources", "$rootDir/src/generated/resources" ]
			exclude '.cache'
		}
	}
}

println('Welcome to MACHINA!')
println(' + Using Java: ' + System.getProperty('java.version'))
println(' + Using JVM:  ' + System.getProperty('java.vm.version') + ' - ' + System.getProperty('java.vendor'))
println(' + Using Arch: ' + System.getProperty('os.arch'))
println()
println('Running Tasks...')

minecraft {
	mappings channel: 'parchment', version: '2022.03.06-1.16.5'
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	runs {
		client {
			workingDirectory project.file('run')
			arg "-mixin.config=machina.mixins.json"
			mods { machina.sources((SourceSet[]) [sourceSets.main]) }
		}

		server {
			workingDirectory project.file('run/server')
			arg "-mixin.config=machina.mixins.json"
			mods { machina.sources((SourceSet[]) [sourceSets.main]) }
		}

		data {
			workingDirectory project.file('run')
			args '--mod', 'machina', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
			mods { machina.sources((SourceSet[]) [sourceSets.main]) }
		}
	}
}


repositories {
	maven { url "https://dvs1.progwml6.com/files/maven/" }
	maven { url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }
	maven { url "https://maven.theillusivec4.top/" }
	maven { url 'https://jitpack.io' }
	maven {
		name 'tterrag maven'
		url "http://maven.tterrag.com/"
		allowInsecureProtocol = true
	}

	maven {
		url "https://cursemaven.com"
		content { includeGroup "curse.maven" }
	}

	exclusiveContent {
		forRepository {
			maven { url 'https://mlt.jfrog.io/artifactory/mlt-mvn-releases-local' }
		}
		filter { includeGroup 'de.dfki.lt.jtok' }
	}
}

configurations {
	shade
	implementation.extendsFrom shade
}

dependencies {
	minecraft 'net.minecraftforge:forge:1.16.5-36.2.33'
    
	// Mod Dependencies
	implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.81')
    
	// Testing Dependencies
	compileOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.130:api")
	runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.130")
	implementation fg.deobf("curse.maven:shutup-407174:3188120")

	// .5 is required for it to work with dumb IDEA. Use .4 when building and then change back
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

shadowJar {
	configurations = [project.configurations.shade]
	archiveClassifier = ''
	classifier = ''
}

task relocateShadowJar(type: ConfigureShadowRelocation) {
	target = tasks.shadowJar
	prefix = "com.machina.shadows"
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

jar {
	archiveClassifier = 'shadowless'
	manifest {
		attributes([
			"Specification-Title": "MACHINA",
			"Specification-Vendor": "Cy4",
			"Specification-Version": "1", // We are version 1 of ourselves
			"Implementation-Title": project.name,
			"Implementation-Version": "${version}",
			"Implementation-Vendor" :"Cy4",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"MixinConfigs": "machina.mixins.json"
		])
	}
	finalizedBy 'reobfJar'
}

task mainJar(type: Jar) {
	duplicatesStrategy(DuplicatesStrategy.FAIL)
	destinationDirectory = file("$rootDir/build-out")
	archiveClassifier.set("main")
	from sourceSets.main.output
	afterEvaluate { finalizedBy reobfMainJar }
	manifest {
		attributes([
			"Specification-Title": "MACHINA",
			"Specification-Vendor": "Cy4",
			"Specification-Version": "1", // We are version 1 of ourselves
			"Implementation-Title": project.name,
			"Implementation-Version": "${version}",
			"Implementation-Vendor" :"Cy4",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
			"MixinConfigs": "machina.mixins.json"
		])
	}
}

task allJar(type: Jar) {
	destinationDirectory = file("$rootDir/build-out")
	archiveClassifier.set("all")
	with mainJar
	finalizedBy 'reobfJar'
	finalizedBy 'shadowJar'
}

artifacts {
	archives jar, shadowJar
}

reobf {
	shadowJar { classpath.from(sourceSets.main.compileClasspath) }
	jar { classpath.from(sourceSets.main.compileClasspath) }
	mainJar { classpath.from(sourceSets.main.compileClasspath) }
}

tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfShadowJar')

publishing {
	publications {
		mavenJava(MavenPublication) { artifact allJar }
	}
	repositories {
		maven { url "file:///${project.projectDir}/mcmodsrepo" }
	}
}