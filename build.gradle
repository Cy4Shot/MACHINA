buildscript {
    repositories {
   		maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
    classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "machina.refmap.json"
    config "machina.mixins.json"
    
    debug.verbose = true
    debug.export = true
}

version = 'alpha-0.1'
group = 'com.cy4.machina'
archivesBaseName = 'machina'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

sourceSets {

	main {
		java {
			srcDirs = [
				"$rootDir/src/main/java"
			]
		}
		resources {
			srcDirs = [
				"$rootDir/src/main/resources",
				"$rootDir/src/generated/resources"
			]
			exclude '.cache'
		}
	}
        
	test {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
	
		java {
			srcDirs = [
				"$rootDir/src/test/java"
			]
		}
		resources {
			srcDirs = [
				"$rootDir/src/test/resources"
			]
		}
	}
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2021.10.17-1.16.5'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
      		property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			arg "-mixin.config=machina.mixins.json"

            mods {
            	machina.sources((SourceSet[]) [sourceSets.main])
            }
        }

        server {
            workingDirectory project.file('run/server')
            property 'mixin.env.remapRefMap', 'true'
      		property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=machina.mixins.json"

            mods {
            	machina.sources((SourceSet[]) [sourceSets.main])
            }
        }

        data {
            workingDirectory project.file('run')
            
            args '--mod', 'machina', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
            	machina.sources((SourceSet[]) [sourceSets.main])
            }
        }
    }
}

repositories {
	maven {
		url "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
	}
	maven {
	   	name 'tterrag maven'
	   	url "http://maven.tterrag.com/"
	   	allowInsecureProtocol = true
	}
	maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven { url 'https://jitpack.io' }
    
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    
    exclusiveContent {
      forRepository {
         maven {
            url 'https://mlt.jfrog.io/artifactory/mlt-mvn-releases-local'
         }
      }
      filter {
         includeGroup 'de.dfki.lt.jtok'
      }
   }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.22'
    
    // Dependencies
    shadow fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.81')
    shadow group: 'it.unimi.dsi', name: 'fastutil', version: '8.5.6'
    shadow group: 'cc.mallet', name: 'mallet', version: '2.0.8'
	shadow group: 'de.dfki.mary', name: 'voice-cmu-slt-hsmm', version: '5.2.1', {
		exclude group: 'com.twmacinta', module: 'fast-md5'
		exclude group: 'gov.nist.math', module: 'Jampack'
		exclude group: 'de.dfki.mary', module: 'marytts-runtime'
	}
	shadow files('/lib/patched-marytts-runtime.jar')
    
    // Shutup Experimental Settings
    implementation fg.deobf("curse.maven:shutup-407174:3188120")
    
    // JEI
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    
    // Testing Deps.
    implementation fg.deobf("curse.maven:immersive-231951:3573683")
    implementation fg.deobf("curse.maven:mekanism-268560:3659389")
    
    // .5 is required for it to work with dumb IDEA. Use .4 when building and then change back
    annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
}

configurations {
	shadow
	implementation.extendsFrom shadow
}

shadowJar {
	classifier = ''
	configurations = [project.configurations.shadow]
	
	// Relocate Shadows
	relocate 'it.unimi.dsi', "com.machina.shadow_jar.it.unimi.dsi"
	relocate 'cc.mallet', "com.machina.shadow_jar.cc.mallet"
	relocate 'de.dfki.mary', "com.machina.shadow_jar.de.dfki.mary"
	relocate 'it.unimi.dsi', "com.machina.shadow_jar.it.unimi.dsi"
}

jar {
    manifest {
        attributes([
            "Specification-Title": "machina",
            "Specification-Vendor": "The Machina Team and Cy4's community",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"The Machina Team and Cy4's community",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "machina.mixins.json"
        ])
    }
    finalizedBy 'reobfJar'
}

task mainJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    destinationDirectory = file("$rootDir/build-out")
    archiveClassifier.set("main")
    from sourceSets.main.output
    afterEvaluate { finalizedBy reobfMainJar }
    manifest {
        attributes([
            "Specification-Title": "machina",
            "Specification-Vendor": "The Machina Team and Cy4's community",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"The Machina Team and Cy4's community",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "machina.mixins.json"
        ])
    }
}

task allJar(type: Jar) {
	destinationDirectory = file("$rootDir/build-out")
	archiveClassifier.set("all")
	with mainJar
	finalizedBy 'reobfJar'
	finalizedBy 'shadowJar'
}

artifacts {
    archives jar, shadowJar
}

reobf {
    shadowJar { }
    
	jar { classpath.from(sourceSets.main.compileClasspath) }
	mainJar { classpath.from(sourceSets.main.compileClasspath) }
}

tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfShadowJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact allJar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}