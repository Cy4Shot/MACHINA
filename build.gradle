buildscript {
    repositories {
   		maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
    classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
	id 'com.github.johnrengelman.shadow' version '7.1.0'
	id 'org.cadixdev.licenser' version '0.6.1'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "machina.refmap.json"
    config "machina.mixins.json"
    
    debug.verbose = true
    debug.export = true
}

version = '1.0'
group = 'com.cy4.machina'
archivesBaseName = 'machina'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

sourceSets {
	api {
        java {
            srcDir "$rootDir/src/api/java"
        }
        resources {
        	srcDir "$rootDir/src/api/resources"
        }
        compileClasspath += configurations.getByName("minecraft")
	}

	main {
		java {
			srcDirs = [
				"$rootDir/src/main/java"
			]
		}
		resources {
			srcDirs = [
				"$rootDir/src/main/resources",
				"$rootDir/src/generated/resources"
			]
		}
		compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
	}
        
	test {
		compileClasspath += sourceSets.api.output
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.main.output
	
		java {
			srcDirs = [
				"$rootDir/src/test/java"
			]
		}
		resources {
			srcDirs = [
				"$rootDir/src/test/resources"
			]
		}
	}
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2021.10.17-1.16.5'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'mixin.env.remapRefMap', 'true'
      		property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			arg "-mixin.config=machina.mixins.json"

            mods {
            	machina.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }
        
        test {
        	parent runs.client
            workingDirectory project.file('testRun')
            property 'mixin.env.remapRefMap', 'true'
      		property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
			arg "-mixin.config=machina.mixins.json"
			
			environment 'MOD_CLASSES', 'dummy'

            main 'net.minecraftforge.userdev.LaunchTesting'

            mods {
           		tests {
           			source sourceSets.main
           			source sourceSets.api
           			source sourceSets.test
           		}
            }
        }

        server {
            workingDirectory project.file('run/server')
            property 'mixin.env.remapRefMap', 'true'
      		property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=machina.mixins.json"

            mods {
            	machina.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        data {
            workingDirectory project.file('run')
            
            args '--mod', 'machina', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
            	machina.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }
    }
}

repositories {
	maven {
		url "https://dvs1.progwml6.com/files/maven/"
	}
	maven {
		url "https://modmaven.k-4u.nl"
	}
	maven {
		url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/"
	}
	maven {
	   	name 'tterrag maven'
	   	url "http://maven.tterrag.com/"
	   	allowInsecureProtocol = true
	}
	maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
    	name 'reflections'
    	url 'https://mvnrepository.com/artifact/org.reflections/reflections'
    }
    maven {
    	name 'javassist'
    	url 'https://mvnrepository.com/artifact/org.javassist/javassist'
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.9'
    
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
    
    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.45')
    implementation group: 'it.unimi.dsi', name: 'fastutil', version: '8.5.6'
    
    compileOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}:api")
	runtimeOnly fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")
    
    // .5 is required for it to work with dumb IDEA. Use .4 when building and then change back
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    
    implementation(group: 'com.github.Vatuu', name: 'discord-rpc', version: "${discord_rpc_version}")
    shadow(group: 'com.github.Vatuu', name: 'discord-rpc', version: "${discord_rpc_version}")
    
    /* Unused
    implementation "org.reflections:reflections:${reflections_version}"
    shadow "org.reflections:reflections:${reflections_version}"
    
    Included with reflections
	implementation "org.javassist:javassist:${javassist_version}"
	shadow "org.javassist:javassist:${javassist_version}"
	*/
    
}

license {
	header = file("$rootDir/header.txt")
	properties {
        name = 'Machina Team'
        year = 2021
    }

	include '**/*.java'
	
	exclude 'com/cy4/machina/mixin/'
	exclude 'com/cy4/machina/api/util/Color.java'
	
	style {
    	java = 'JAVADOC'
    }

    tasks {
    	main {
    		files.from files("$rootDir/src/main/java")
    	}
    	api {
    		files.from files("$rootDir/src/api/java")
    	}
    	test {
    		files.from files("$rootDir/src/test/java")
    	}
    }
}

configurations {
	shadow
}

shadowJar {
	classifier = ''
	configurations = [project.configurations.shadow]
	//relocate 'org.reflections', "shadow.org.reflections" // ensure repackaged packages have unique names
}

jar {
	from([sourceSets.api, sourceSets.main])

    manifest {
        attributes([
            "Specification-Title": "machina",
            "Specification-Vendor": "Cy4",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Cy4",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "machina.mixins.json"
        ])
    }
}

task apiJar(type: Jar) {
    // Sources included because of MinecraftForge/ForgeGradle#369
    from sourceSets.api.output
    destinationDirectory = file("$rootDir/build-out")
    classifier("api")
}

artifacts {
    archives jar, shadowJar, apiJar
}

reobf {
    shadowJar { }
}

tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfShadowJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
